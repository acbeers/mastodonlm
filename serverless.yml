service: list-manager

frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.9
  stage: ${opt:stage, "dev"}
  region: us-west-2
  logRetentionInDays: 14
  environment:
    TABLE_AUTH: ${self:custom.authTable}
    TABLE_ALLOWED: ${self:custom.allowedTable}
    TABLE_BLOCKED: ${self:custom.blockedTable}
    TABLE_HOSTCFG: ${self:custom.hostcfgTable}
  httpApi:
    cors:
      allowedOrigins:
        - https://acbeers.github.io
        - http://localhost:3000
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
        - OPTIONS
      allowCredentials: true

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:Query"
          Resource: "arn:aws:dynamodb:us-west-2:879669037085:table/${self:custom.authTable}"
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:Query"
          Resource: "arn:aws:dynamodb:us-west-2:879669037085:table/${self:custom.allowedTable}"
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:Query"
          Resource: "arn:aws:dynamodb:us-west-2:879669037085:table/${self:custom.hostcfgTable}"
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:Query"
            - "dynamodb:BatchWriteItem"
          Resource: "arn:aws:dynamodb:us-west-2:879669037085:table/${self:custom.blockedTable}"

resources: # CloudFormation template syntax from here on.
  Resources:
    # Stores auth tokens for users and other info
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:custom.authTable}"
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.readcapacity.${self:provider.stage}}
          WriteCapacityUnits: ${self:custom.writecapacity.${self:provider.stage}}
        TimeToLiveSpecification:
          Enabled: true
          AttributeName: expires_at

    # Essentially, a list of allowed hosts.
    allowTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:custom.allowedTable}"
        AttributeDefinitions:
          - AttributeName: host
            AttributeType: S
        KeySchema:
          - AttributeName: host
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.readcapacity.${self:provider.stage}}
          WriteCapacityUnits: ${self:custom.writecapacity.${self:provider.stage}}

    # Essentially, a list of blocked hosts.
    blockTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:custom.blockedTable}"
        AttributeDefinitions:
          - AttributeName: hash
            AttributeType: S
        KeySchema:
          - AttributeName: hash
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.readcapacity.${self:provider.stage}}
          WriteCapacityUnits: ${self:custom.writecapacity.${self:provider.stage}}

    # Stores host information (secrets, urls, etc)
    hostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:custom.hostcfgTable}"
        AttributeDefinitions:
          - AttributeName: host
            AttributeType: S
        KeySchema:
          - AttributeName: host
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.readcapacity.${self:provider.stage}}
          WriteCapacityUnits: ${self:custom.writecapacity.${self:provider.stage}}

functions:
  auth:
    handler: handler.auth
    timeout: 30
    events:
      - httpApi:
          path: /auth
          method: GET
  callback:
    handler: handler.callback
    timeout: 30
    events:
      - httpApi:
          path: /callback
          method: POST
  meta:
    timeout: 30
    handler: handler.meta
    events:
      - httpApi:
          path: /meta
          method: GET
  following:
    timeout: 30
    handler: handler.following
    events:
      - httpApi:
          path: /following
          method: GET
  lists:
    timeout: 30
    handler: handler.lists
    events:
      - httpApi:
          path: /lists
          method: GET
  add:
    timeout: 30
    handler: handler.add_to_list
    events:
      - httpApi:
          path: /add
          method: POST
  remove:
    timeout: 30
    handler: handler.remove_from_list
    events:
      - httpApi:
          path: /remove
          method: POST
  create:
    timeout: 30
    handler: handler.create_list
    events:
      - httpApi:
          path: /create
          method: POST
  delete:
    timeout: 30
    handler: handler.delete_list
    events:
      - httpApi:
          path: /delete
          method: POST
  blocklistUpdate:
    handler: handler.block_update
    timeout: 300
    events:
      - schedule: cron(0 8 * * ? *)

package:
  patterns:
    - "!node_modules"
    - "!list-manager"

custom:
  authTable: "${self:service}-auth-${self:provider.stage}"
  allowedTable: "${self:service}-allowedHosts-${self:provider.stage}"
  blockedTable: "${self:service}-blockedHosts-${self:provider.stage}"
  hostcfgTable: "${self:service}-hostConfig-${self:provider.stage}"
  serverless-offline:
    httpPort: 4000
  readcapacity:
    dev: 2
    prod: 5
  writecapacity:
    dev: 2
    prod: 5
  dynamodb:
    ttl:
      - table: ${self:custom.authTable}
        field: expires_at

plugins:
  - serverless-python-requirements
  - serverless-offline

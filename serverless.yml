service: list-manager

frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.9
  stage: dev
  region: us-west-2
  httpApi:
    cors:
      allowedOrigins:
        - https://acbeers.github.io
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
        - OPTIONS
      allowCredentials: true

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
          Resource: "arn:aws:dynamodb:us-west-2:879669037085:table/authTable"

resources: # CloudFormation template syntax from here on.
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: authTable
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TimeToLiveSpecification:
          Enabled: true
          AttributeName: expires_at

functions:
  auth:
    handler: handler.auth
    events:
      - httpApi:
          path: /auth
          method: GET
  callback:
    handler: handler.callback
    events:
      - httpApi:
          path: /callback
          method: POST
  info:
    timeout: 30
    handler: handler.info
    events:
      - httpApi:
          path: /info
          method: GET
  add:
    timeout: 30
    handler: handler.add_to_list
    events:
      - httpApi:
          path: /add
          method: POST
  remove:
    timeout: 30
    handler: handler.remove_from_list
    events:
      - httpApi:
          path: /remove
          method: POST
  create:
    timeout: 30
    handler: handler.create_list
    events:
      - httpApi:
          path: /create
          method: POST
  delete:
    timeout: 30
    handler: handler.delete_list
    events:
      - httpApi:
          path: /delete
          method: POST

package:
  patterns:
    - "!node_modules"
    - "!list-manager"

custom:
  serverless-offline:
    httpPort: 4000
  dynamodb:
    ttl:
      - table: authTable
        field: your-ttl-property-name

plugins:
  - serverless-python-requirements
  - serverless-offline

# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: andrewbeers
service: list-manager

#variablesResolutionMode: 20210326

build:
  esbuild: false
  
provider:
  name: aws
  runtime: python3.13
  stage: ${opt:stage, "dev"}
  region: us-west-2
  logRetentionInDays: 14
  environment:
    TABLE_AUTH: ${self:custom.authTable}
    TABLE_ALLOWED: ${self:custom.allowedTable}
    TABLE_BLOCKED: ${self:custom.blockedTable}
    TABLE_HOSTCFG: ${self:custom.hostcfgTable}
    AUTH_REDIRECT: ${self:custom.redirects.${self:provider.stage}}
  httpApi:
    cors:
      allowedOrigins: ${self:custom.origins.${self:provider.stage}}
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
        - OPTIONS
      allowCredentials: true

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Query"
          Resource: "arn:aws:dynamodb:us-west-2:879669037085:table/${self:custom.authTable}"
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:Query"
          Resource: "arn:aws:dynamodb:us-west-2:879669037085:table/${self:custom.allowedTable}"
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:Query"
          Resource: "arn:aws:dynamodb:us-west-2:879669037085:table/${self:custom.hostcfgTable}"
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:Query"
            - "dynamodb:Scan"
            - "dynamodb:DeleteItem"
            - "dynamodb:BatchWriteItem"
          Resource: "arn:aws:dynamodb:us-west-2:879669037085:table/${self:custom.blockedTable}"

resources: # CloudFormation template syntax from here on.
  Outputs:
    myCloudfrontDomain:
      Value:
        "Fn::GetAtt": [CloudFrontDistribution, DomainName]

    CDNDistributionId:
      Description: CDN distribution id.
      Value:
        Ref: CloudFrontDistribution
      Export:
        Name: CDNDistributionId-${self:provider.stage}

  Resources:
    # Stores auth tokens for users and other info
    usersTable: ${file(serverless/tables.yml):usersTable}
    # Essentially, a list of allowed hosts.
    allowTable: ${file(serverless/tables.yml):allowTable}
    # Essentially, a list of blocked hosts.
    blockTable: ${file(serverless/tables.yml):blockTable}
    # Stores host information (secrets, urls, etc)
    hostsTable: ${file(serverless/tables.yml):hostsTable}
    # Cloudfront configuration for domain handling
    CloudFrontDistribution: ${file(serverless/cfwebsite.yml):CloudFrontDistribution}
    AssetsBucket: ${file(serverless/cfwebsite.yml):AssetsBucket}
    BucketPolicy: ${file(serverless/s3policy.yml)}

functions: ${file(serverless/functions.yml)}

package:
  patterns:
    - "!node_modules"
    - "!packages"
    # serverless-plugin-typescript seems to break the inclusion of *.py files.
    # so be explicit.
    - "backendpy/*.py"

custom:
  # Table names
  authTable: "${self:service}-auth-${self:provider.stage}"
  allowedTable: "${self:service}-allowedHosts-${self:provider.stage}"
  blockedTable: "${self:service}-blockedHosts-${self:provider.stage}"
  hostcfgTable: "${self:service}-hostConfig-${self:provider.stage}"
  # Offline configuration
  serverless-offline:
    httpPort: 4000
  # Database stuff
  readcapacity: ${file(serverless/tables.yml):readcapacity}
  writecapacity: ${file(serverless/tables.yml):writecapacity}
  dynamodb: ${file(serverless/tables.yml):dynamodb}

  # Redirects
  redirects:
    newprod: https://www.mastodonlistmanager.org
    devstage: https://devstage.mastodonlistmanager.org
    dev: http://localhost:3000

  # Origins
  origins:
    newprod:
      - https://www.mastodonlistmanager.org
      - https://mastodonlistmanager.org
    devstage:
      - https://www-devstage.mastodonlistmanager.org
      - https://devstage.mastodonlistmanager.org
    dev:
      - http://localhost:3000

  # Should we s3 sync?
  enableS3Sync:
    newprod: true
    devstage: true
    dev: false

  serverlessPluginTypescript:
    tsConfigFileLocation: "packages/server/tsconfig.json"

  # Domain name support
  name: ${self:service}-${self:provider.stage}
  websiteBucket: ${self:custom.name}
  cloudfrontOriginId: ${self:custom.name}-cloud-front
  # Configuration for backend domain
  customDomain: ${file(serverless/cfwebsite.yml):customDomain}
  # Configuration for frontend (website) domain
  domainComponents: ${file(serverless/cfwebsite.yml):domainComponents}
  websiteDomain: ${file(serverless/cfwebsite.yml):websiteDomain}

  # For publishing our website
  s3Sync: ${file(serverless/s3sync.yml)}
  cloudfrontInvalidate:
    - distributionIdKey: "CDNDistributionId" # conditional, distributionId or distributionIdKey is required.
      autoInvalidate: true # Can be set to false to avoid automatic invalidation after the deployment. Useful if you want to manually trigger the invalidation later. Defaults to true.
      items: # one or more paths required
        - "/index.html"
        - "/static/js/*"
        - "/static/css/*"

plugins:
  - serverless-python-requirements
  - serverless-offline
  # For putting lambda functions behind a custom domain
  - serverless-domain-manager
  # For putting a static website behind a custom domain
  - serverless-website-domain
  # For syncing a built website to S3.
  - serverless-s3-sync
  # For invalidating things in Cloudfront on publish
  - serverless-cloudfront-invalidate
